structure:
  primitives:
    value:
      constants:
        value:
          lhs: "<span class='var'>Cons</span>"
          conn: "is"
          rhs: "a set of sets of constants of each type in <span class='set'>T</span>"
      variables:
        value:
          lhs: "<span class='var'>Vars</span>"
          conn: "is"
          rhs: "a set of sets of variables of each type in <span class='set'>T</span>"
  semantic value:
    value:
      lhs:
        external: semwrap
        inside: "&middot;"
        outside:
          - "<span>i</span>"
          - "<span class='var'>g</span>"
          - "<span class='set'>M</span>"
      conn: "is"
      rhs: "the semantic value function"
    parts:
      index of evaluation:
        value: "i : s"
      assignment function:
        value: "g : Vars &rarr; D"
      model:
        value:
          lhs:
            lhs: "<span class='set'>M</span>"
            conn: =
            rhs:
              externl: seqwrap
              inside: "<span class='set'>D</span>, <span class='set'>V</span>"
          conn: "is"
          rhs: "a model for the language"
        parts:
          universe:
            value:
              lhs:
                external: universe
              conn: "is"
              rhs: "a type structured universe of the discourse"
          valuation:
            value:
              lhs: "<span class='set'>V</span> : Cons &rarr; <span class='set'>D</span>"
              conn: "is"
              rhs: "a valuation function that assigns type-relevant objects to each constant"
rules:
  primitives:
    cond:
      - "<span>&alpha;</span><span>&isin;</span><span>T</span>"
      - "<span>c</span><span>&alpha;</span><span>&isin;</span><span class='var'>Cons</span>"
      - "<span>u</span><span>&alpha;</span><span>&isin;</span><span class='var'>Vars</span>"
    value:
      constants:
        value:
          lhs:
            external: semwrap
            inside: "c<sub>&alpha;</sub>"
            outside: "<sup><span class='set'>M</span></sup>"
          conn: =
          rhs: "<span class='set'>V</span>(c<sub>&alpha;</sub>)"
      variables:
        value:
          lhs:
            external: semwrap
            inside: "u<sub>&alpha;</sub>"
            outside: "<sup><span class='var'>g</span></sup>"
          conn: =
          rhs: "<span class='var'>g</span>(u<sub>&alpha;</sub>)"
      top:
        value:
          lhs:
            external: semwrap
            inside: "&top;<sub>&alpha;</sub>"
          conn: =
          rhs: "<span class='set'>D</span><sub>&alpha;</sub>"
  application:
    cond:
      - "<span>&alpha;</span><span>&isin;</span><span>T</span>"
      - "<span>u</span><sub>&alpha;</sub><span>&isin;</span><span class='var'>Vars</span>"
      - "</span><span>d</span><sub>&alpha;</sub><span>&isin;</span><span class='set'>D</span>"
      - "<span>terms</span><span>A</span>"
    value:
      lhs:
        external: semwrap
        inside: "&lambda;u<sub>&alpha;</sub>(A)"
        outside: "<sup><span class='var'>g</span></sup>"
      conn: =
      rhs:
        external: semwrap
        inside: "A"
        outside: "<sup><span class='var'>g</span>[u<sub>&alpha;</sub>&rarr;d]</sup>"
  identity:
    cond:
      - "<span>&alpha;</span><span>&isin;</span><span class='set'>T</span>"
      - "<span>terms</span><span>A</span><span>and</span><span>B</span>"
    value:
      lhs:
        external: semwrap
        inside: "A<sub>&alpha;</sub> = B<sub>&alpha;</sub>"
      conn: =
      rhs:
        - lhs: "1"
          conn: if
          rhs:
            lhs:
              external: semwrap
              inside: "A<sub>&alpha;</sub>"
            conn: =
            rhs:
              external: semwrap
              inside: "B<sub>&alpha;</sub>"
        - lhs: "0"
          conn: otherwise
  booleans:
    cond:
      - "A : (et)"
      - "B : (et)t"
    value:
      -
        lhs:
          external: semwrap
          inside: "&not;&phi;"
        conn: =
        rhs:
          lhs:
            external: semwrap
            inside: "&top;"
          conn: "/"
          rhs: "&phi;"
      -
        lhs:
          external: semwrap
          inside: "&phi;&and;&psi;"
        conn: =
        rhs:
          lhs:
            external: semwrap
            inside: "&phi;"
          conn: "&#x22C2;"
          rhs:
            external: semwrap
            inside: "&psi;"
      -
        lhs:
          external: semwrap
          inside: "&phi;&or;&psi;"
        conn: =
        rhs:
          lhs:
            external: semwrap
            inside: "&phi;"
          conn: "&#x22C3;"
          rhs:
            external: semwrap
            inside: "&psi;"
  quantifiers:
    cond:
      - "u<sub>e</sub>&isin;<span class='var'>Vars</span>"
      - "&phi; : (st)"
    value:
      -
        lhs:
          external: semwrap
          inside: "&forall;u<sub>e</sub>&phi;"
          outside: "<span class='var'>g</span>"
        conn: =
        rhs:
          - lhs: "1"
            conn: if
            rhs:
              lhs:
                external: semwrap
                inside: "&phi;"
                outside: "<sup><span class='var'>g</span>[x&rarr;u<sub>e</sub>]</sup>"
              conn: =
              rhs: "1 for all u<sub>e</sub>"
          - lhs: "0"
            conn: otherwise
      -
        lhs:
          external: semwrap
          inside: "&exist;u<sub>e</sub>&phi;"
          outside: "<span class='var'>g</span>"
        conn: =
        rhs:
          - lhs: "1"
            conn: if
            rhs:
              lhs:
                external: semwrap
                inside: "&phi;"
                outside: "<sup><span class='var'>g</span>[x&rarr;u<sub>e</sub>]</sup>"
              conn: =
              rhs: "1 for some u<sub>e</sub>"
          - lhs: "0"
            conn: otherwise
  bare plurals:
    cond:
      - "A : (et)"
      - "B : (et)t"
      - "<span class='set'>R</span> : &pi;"
    value:
      lhs:
        external: semwrap
        inside: "&forall;<sub><span class='set'>R</span></sub>(A)(B)"
      conn: =
      rhs:
        - lhs: "1"
          conn: if
          rhs:
            -
              lhs:
                external: setsemwrap
                inside: "A"
              conn: "&isin;"
              rhs: "<span class='set'>R</span>"
            -
              lhs:
                external: semwrap
                inside: "A"
              conn: "&sube;"
              rhs:
                external: semwrap
                inside: "B"
        - lhs: "0"
          conn: otherwise
