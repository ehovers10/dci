types:
  basic:
    situations: s
    individuals: e
    truth values: t
    propositional completions: "&chi;"
    discourse change records: "&rho;"
    conversational scoreboards: "&sigma"
  complex:
    "(&alpha;&beta;) <span style='border-right:1px solid #000;'>&nbsp;</span> &alpha;,&beta; &isin; <span class='set'>T</span>"
  dref:
    situations: s
    common ground partitions: "&pi; = (st)t"
    propositional completions: "&chi;"
    propositional radicals: "&xi; = &chi;(st)"
    discourse change records: "&rho;"

semantic:
  structure:
    primitives:
      Cons: "a set of sets of constants of each type in <span class='set'>T</span>"
      Vars: "a set of sets of variables of each type in <span class='set'>T</span>"
    semantic value:
      thing: semvalue
      description: "the semantic value function"
      parts:
        index of evaluation: "i : s"
        assignment function: "g : Vars &rarr; D"
        model:
          thing:
            "<span class='set'>M</span> = &#x27e8; <span class='set'>D</span>, <span class='set'>V</span> &#x27e9;"
          description: "a model for the language"
          parts:
            universe:
              thing: universe
              description: "a type structured universe of the discourse"
            valuation:
              thing: "<span class='set'>V</span> : Cons &rarr; <span class='set'>D</span>"
              description: "a valuation function that assigns type-relevant objects to each constant"
  rules:
    primitives:
      cond:
        - "<span>&alpha;</span><span>&isin;</span><span>T</span>"
        - "<span>c</span><span>&alpha;</span><span>&isin;</span><span class='var'>Cons</span>"
        - "<span>u</span><span>&alpha;</span><span>&isin;</span><span class='var'>Vars</span>"
      value:
        constants:
          lhs:
            external: semvalue
            inside: "c<sub>&alpha;</sub>"
            outside: "<sup><span class='set'>M</span></sup>"
          conn: =
          rhs: "<span class='set'>V</span>(c<sub>&alpha;</sub>)"
        variables:
          lhs:
            external: semvalue
            inside: "u<sub>&alpha;</sub>"
            outside: "<sup><span class='var'>g</span></sup>"
          conn: =
          rhs: "<span class='var'>g</span>(u<sub>&alpha;</sub>)"
        top:
          lhs:
            external: semvalue
            inside: "&top;<sub>&alpha;</sub>"
          conn: =
          rhs: "<span class='set'>D</span><sub>&alpha;</sub>"
    application:
      cond:
        - "<span>&alpha;</span><span>&isin;</span><span>T</span>"
        - "<span>u</span><sub>&alpha;</sub><span>&isin;</span><span class='var'>Vars</span>"
        - "</span><span>d</span><sub>&alpha;</sub><span>&isin;</span><span class='set'>D</span>"
        - "<span>terms</span><span>A</span>"
      value:
        lhs:
          external: semvalue
          inside: "&lambda;u<sub>&alpha;</sub>(A)"
          outside: "<sup><span class='var'>g</span></sup>"
        conn: =
        rhs:
          external: semvalue
          inside: "A"
          outside: "<sup><span class='var'>g</span>[u<sub>&alpha;</sub>&rarr;d]</sup>"
    identity:
      cond:
        - "<span>&alpha;</span><span>&isin;</span><span class='set'>T</span>"
        - "<span>terms</span><span>A</span><span>and</span><span>B</span>"
      value:
        lhs:
          external: semvalue
          inside: "A<sub>&alpha;</sub> = B<sub>&alpha;</sub>"
        conn: =
        rhs:
          - lhs: "1"
            conn: if
            rhs:
              lhs:
                external: semvalue
                inside: "A<sub>&alpha;</sub>"
              conn: =
              rhs:
                external: semvalue
                inside: "B<sub>&alpha;</sub>"
          - lhs: "0"
            conn: otherwise
    booleans:
      cond:
        - "A : (et)"
        - "B : (et)t"
      value:
        -
          lhs:
            external: semvalue
            inside: "&not;&phi;"
          conn: =
          rhs:
            lhs:
              external: semvalue
              inside: "&top;"
            conn: "/"
            rhs: "&phi;"
        -
          lhs:
            external: semvalue
            inside: "&phi;&and;&psi;"
          conn: =
          rhs:
            lhs:
              external: semvalue
              inside: "&phi;"
            conn: "&#x22C2;"
            rhs:
              external: semvalue
              inside: "&psi;"
        -
          lhs:
            external: semvalue
            inside: "&phi;&or;&psi;"
          conn: =
          rhs:
            lhs:
              external: semvalue
              inside: "&phi;"
            conn: "&#x22C3;"
            rhs:
              external: semvalue
              inside: "&psi;"
    quantifiers:
      cond:
        - "u<sub>e</sub>&isin;<span class='var'>Vars</span>"
        - "&phi; : (st)"
      value:
        -
          lhs:
            external: semvalue
            inside: "&forall;u<sub>e</sub>&phi;"
            outside: "<span class='var'>g</span>"
          conn: =
          rhs:
            - lhs: "1"
              conn: if
              rhs:
                lhs:
                  external: semvalue
                  inside: "&phi;"
                  outside: "<sup><span class='var'>g</span>[x&rarr;u<sub>e</sub>]</sup>"
                conn: =
                rhs: "1 for all u<sub>e</sub>"
            - lhs: "0"
              conn: otherwise
        -
          lhs:
            external: semvalue
            inside: "&exist;u<sub>e</sub>&phi;"
            outside: "<span class='var'>g</span>"
          conn: =
          rhs:
            - lhs: "1"
              conn: if
              rhs:
                lhs:
                  external: semvalue
                  inside: "&phi;"
                  outside: "<sup><span class='var'>g</span>[x&rarr;u<sub>e</sub>]</sup>"
                conn: =
                rhs: "1 for some u<sub>e</sub>"
            - lhs: "0"
              conn: otherwise
    bare plurals:
      cond:
        - "A : (et)"
        - "B : (et)t"
        - "<span class='set'>R</span> : &pi;"
      value:
        lhs:
          external: semvalue
          inside: "&forall;<sub><span class='set'>R</span></sub>(A)(B)"
        conn: =
        rhs:
          - lhs: "1"
            conn: if
            rhs:
              -
                lhs:
                  external: setsemvalue
                  inside: "A"
                conn: "&isin;"
                rhs: "<span class='set'>R</span>"
              -
                lhs:
                  external: semvalue
                  inside: "A"
                conn: "&sube;"
                rhs:
                  external: semvalue
                  inside: "B"
          - lhs: "0"
            conn: otherwise
