primitives:
  -
    - "<span>&alpha;</span><span>&isin;</span><span>T</span>"
    - "<span>c</span><span>&alpha;</span><span>&isin;</span><span class='var'>Cons</span>"
    - "<span>u</span><span>&alpha;</span><span>&isin;</span><span class='var'>Vars</span>"
  - constants:
    - fxn: eqn
      arg:
        lhs:
          - fxn: semwrap
            arg:
              inside: "c<sub>&alpha;</sub>"
              after: "<sup><span class='set'>M</span></sup>"
        conn: =
        rhs: "<span class='set'>V</span>(c<sub>&alpha;</sub>)"
  - variables:
    - fxn: eqn
      arg:
        lhs:
          - fxn: semwrap
            arg:
              inside: "u<sub>&alpha;</sub>"
              after: "<sup><span class='var'>g</span></sup>"
        conn: =
        rhs: "<span class='var'>g</span>(u<sub>&alpha;</sub>)"
  - top:
    - fxn: eqn
      arg:
        lhs:
          - fxn: semwrap
            arg:
              inside: "&top;<sub>&alpha;</sub>"
        conn: =
        rhs: "<span class='set'>D</span><sub>&alpha;</sub>"

application:
  -
    - "<span>&alpha;</span><span>&isin;</span><span>T</span>"
    - "<span>u</span><sub>&alpha;</sub><span>&isin;</span><span class='var'>Vars</span>"
    - "</span><span>d</span><sub>&alpha;</sub><span>&isin;</span><span class='set'>D</span>"
    - "<span>terms</span><span>A</span>"
  - fxn: eqn
    arg:
      lhs:
        - fxn: semwrap
          arg:
            inside: "&lambda;u<sub>&alpha;</sub>(A)"
            after: "<sup><span class='var'>g</span></sup>"
      conn: =
      rhs:
        - fxn: semwrap
          arg:
            inside: "A"
            after: "<sup><span class='var'>g</span>[u<sub>&alpha;</sub>&rarr;d]</sup>"

identity:
  -
    - "<span>&alpha;</span><span>&isin;</span><span class='set'>T</span>"
    - "<span>terms</span><span>A</span><span>and</span><span>B</span>"
  - fxn: eqn
    arg:
      lhs:
        - fxn: semwrap
          arg:
            inside: "A<sub>&alpha;</sub> = B<sub>&alpha;</sub>"
      conn: =
      rhs:
        - fxn: eqn
          arg:
            lhs: "1"
            conn: if
            rhs:
              - fxn: eqn
                arg:
                  lhs:
                    - fxn: semwrap
                      arg:
                        inside: "A<sub>&alpha;</sub>"
                  conn: =
                  rhs:
                    - fxn: semwrap
                      arg:
                        inside: "B<sub>&alpha;</sub>"
        - fxn: eqn
          arg:
            lhs: "0"
            conn: otherwise
            rhs: "&nbsp;"

booleans:
  -
    - "A : (et)"
    - "B : (et)t"
  - fxn: eqn
    arg:
      lhs:
        - fxn: semwrap
          arg:
            inside: "&not;&phi;"
      conn: =
      rhs:
        - fxn: eqn
          arg:
            lhs:
              - fxn: semwrap
                arg:
                  inside: "&top;"
            conn: "/"
            rhs: "&phi;"
  - fxn: eqn
    arg:
      lhs:
        - fxn: semwrap
          arg:
            inside: "&phi;&and;&psi;"
      conn: =
      rhs:
      - fxn: eqn
        arg:
          lhs:
            - fxn: semwrap
              arg:
                inside: "&phi;"
          conn: "&#x22C2;"
          rhs:
          - fxn: semwrap
            arg:
              inside: "&psi;"
  - fxn: eqn
    arg:
      lhs:
        - fxn: semwrap
          arg:
            inside: "&phi;&or;&psi;"
      conn: =
      rhs:
      - fxn: eqn
        arg:
          lhs:
            - fxn: semwrap
              arg:
                inside: "&phi;"
          conn: "&#x22C3;"
          rhs:
            - fxn: semwrap
              arg:
                inside: "&psi;"

quantifiers:
  -
    - "u<sub>e</sub>&isin;<span class='var'>Vars</span>"
    - "&phi; : (st)"
  - fxn: eqn
    arg:
      lhs:
        - fxn: semwrap
          arg:
            inside: "&forall;u<sub>e</sub>&phi;"
            after: "<span class='var'>g</span>"
      conn: =
      rhs:
        - fxn: eqn
          arg:
            lhs: "1"
            conn: if
            rhs:
              - fxn: eqn
                arg:
                  lhs:
                    - fxn: semwrap
                      arg:
                        inside: "&phi;"
                        after: "<sup><span class='var'>g</span>[x&rarr;u<sub>e</sub>]</sup>"
                  conn: =
                  rhs: "1 for all u<sub>e</sub>"
        - fxn: eqn
          arg:
            lhs: "0"
            conn: otherwise
            rhs: "&nbsp;"
  - fxn: eqn
    arg:
      lhs:
        - fxn: semwrap
          arg:
            inside: "&exist;u<sub>e</sub>&phi;"
            after: "<span class='var'>g</span>"
      conn: =
      rhs:
        - fxn: eqn
          arg:
            lhs: "1"
            conn: if
            rhs:
              - fxn: eqn
                arg:
                  lhs:
                    - fxn: semwrap
                      arg:
                        inside: "&phi;"
                        after: "<sup><span class='var'>g</span>[x&rarr;u<sub>e</sub>]</sup>"
                  conn: =
                  rhs: "1 for some u<sub>e</sub>"
        - fxn: eqn
          arg:
            lhs: "0"
            conn: otherwise
            rhs: "&nbsp;"

bare plurals:
  -
    - "A : (et)"
    - "B : (et)t"
    - "<span class='set'>R</span> : &pi;"
  - fxn: eqn
    arg:
      lhs:
        - fxn: semwrap
          arg:
            inside: "&forall;<sub><span class='set'>R</span></sub>(A)(B)"
      conn: =
      rhs:
        - fxn: eqn
          arg:
            lhs: "1"
            conn: if
            rhs:
              - fxn: eqn
                arg:
                  lhs:
                    - fxn: semwrap
                      arg:
                        inside: "A"
                  conn: "&isin;"
                  rhs: "<span class='set'>R</span>"
              - fxn: eqn
                arg:
                  lhs:
                    - fxn: semwrap
                      arg:
                        inside: "A"
                  conn: "&sube;"
                  rhs:
                    - fxn: semwrap
                      arg:
                        inside: "B"
        - fxn: eqn
          arg:
            lhs: "0"
            conn: otherwise
            rhs: "&nbsp;"
