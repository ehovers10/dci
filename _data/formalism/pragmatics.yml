drs:
  - fxn: eqn
    arg:
      lhs:
        fxn: eqn
        arg:
          lhs: "&phi;"
          conn: =
          rhs:
            - fxn: drswrap
              arg:
                dref: "&phi;<sup>d</sup>"
                conditions: "&phi;<sup>c</sup>"
      conn: "is"
      rhs: "a discourse representation structure (DRS)"
  - drefs:
    - fxn: eqn
      arg:
        lhs: "&phi;<sup>d</sup>"
        conn: "is"
        rhs: "a sequence of drefs introduced in the discourse"
  - conditions:
    - fxn: eqn
      arg:
        lhs: "&phi;<sup>c</sup>"
        conn: "is"
        rhs: "a sequence of conditions, imposing constraints on the <br>model against which sentences are evaluated"

contributions:
  -
    - "a sentence S"
    - "uttered in discourse D"
    - "represented by DRS &phi;"
  - drefs:
    - fxn: eqn
      arg:
        lhs: "S<sup>d</sup>"
        conn: "is"
        rhs: "the sequence of drefs contributed by S,"
  - conditions:
    - fxn: eqn
      arg:
        lhs: "S<sup>c</sup>"
        conn: "is"
        rhs: "the sequence of conditions contributed by S."
  - sentences:
    - fxn: eqn
      arg:
        lhs: "D &rArr; S"
        conn: "="
        rhs:
          fxn: drswrap
          arg:
            dref: "&phi;<sup>d</sup> &oplus; S<sup>d</sup>"
            conditions: "&phi;<sup>c</sup> &oplus; S<sup>c</sup>"

information state:
  - fxn: eqn
    arg:
      lhs:
        fxn: seqwrap
        arg:
          inside:
            - i
            - "<span class='set'>R</span>"
            - fxn: seqwrap
              arg:
                inside: dref
            - fxn: seqwrap
              arg:
                inside: sand
            - fxn: seqwrap
              arg:
                inside: rec
      conn: "is"
      rhs: "an information state for the discourse"
  - common ground:
    - fxn: eqn
      arg:
        lhs: "i : s"
        conn: "is"
        rhs: "the common ground"
  - relation set:
    - fxn: eqn
      arg:
        lhs: "<span class='set'>R</span> : (&pi;t)"
        conn: "is"
        rhs: "a set of partitions of the common ground"
  - drefs:
    - fxn: eqn
      arg:
        lhs:
          fxn: seqwrap
          arg:
            inside: dref
        conn: "is"
        rhs: "a sequence of discourse referents"
  - sandbox:
    - fxn: eqn
      arg:
        lhs:
          fxn: seqwrap
          arg:
            inside: sand
        conn: "is"
        rhs: "a sequence of propositional radical/completion pairs <br>representing the collaborative space of the discourse"
  - record:
    - fxn: eqn
      arg:
        lhs:
          fxn: seqwrap
          arg:
            inside: rec
        conn: "is"
        rhs: "a sequence of discourse referents of type &sigma; that <br>provides a record of changes made to the information <br>state throughout the discourse"

cooperative update:
  - informative update:
    - fxn: eqn
      arg:
        lhs:
          fxn: drswrap
          arg:
            dref: "&nbsp;"
            conditions: "C<sub>st</sub>"
        conn: "&rArr;"
        rhs:
          - fxn: eqn
            arg:
              lhs: "i"
              conn: "&#x22C2;"
              rhs:
                - fxn: semwrap
                  arg:
                    inside: "C<sub>st</sub>"
                    after: "<sup>i</sup>"
          - "&lambda;&sigma;( i<sub>&sigma;</sub> &#x22C2; C<sub>s</sub> = i<sub>&sigma;</sub> )"
  - structuring update:
    - fxn: eqn
      arg:
        lhs:
          fxn: drswrap
          arg:
            dref: "&nbsp;"
            conditions: "C<sub>(st)t</sub>"
        conn: "&rArr;"
        rhs:
          - fxn: eqn
            arg:
              lhs: "<span class='set'>R</span>"
              conn: "&#x22Ca;"
              rhs:
                fxn: semwrap
                arg:
                  inside: "C<sub>(st)t</sub>"
                  after: "<sup><span class='set'>R</span></sup>"
          - "&lambda;&sigma;( <span class='set'>R</span><sup>&sigma;</sup> &#x22C2; C<sub>st</sub> = <span class='set'>R</span><sub>&sigma;</sub> )"
  - dref introduction:
    - fxn: eqn
      arg:
        lhs:
          fxn: drswrap
          arg:
            dref: "u<sub>1</sub>..u<sub>n</sub>"
            conditions: "&nbsp;"
        conn: "&rArr;"
        rhs:
          - fxn: eqn
            arg:
              lhs: "u<sub>1</sub>..u<sub>n</sub>"
              conn: "&#x29c0;"
              rhs:
                fxn: seqwrap
                arg:
                  inside: "dref"
          - "&lambda;&sigma;( &forall;(k &isin; [0..n])( &delta;<sub>&sigma;</sub>[k] = <span class='var'>g</span>(u<sub>k</sub> ) )"

collaborative update:
  - initialization:
    - fxn: eqn
      arg:
        lhs: "U<sup>init</sup>"
        conn: "&#x21a5;<sub>&sigma;</sub>"
        rhs:
          fxn: seqwrap
          arg:
            inside:
              - "i<sub>&sigma;</sub>"
              - fxn: seqwrap
                arg:
                  inside: "dref"
                  after: "<sub>&sigma;</sub>"
            after: "<sub>sand</sub>"
  - propagation:
    - fxn: eqn
      arg:
        lhs: "U<sup>prop</sup>"
        conn: "&#x21a6;<sub>&sigma;</sub>"
        rhs:
          fxn: drswrap
          arg:
            dref: "<span class='var'>dref</span><sup>prop</sup>"
            conditions: "U<sup>prop</sup><sub>(st)t</sub>"
    - present:
      - fxn: eqn
        arg:
          lhs: "<span class='var'>dref</span><sup>prop</sup>"
          conn: "&#x29c0;"
          rhs: "<span class='set'>dref</span><sup>sand</sup>"
    - partition:
      - fxn: eqn
        arg:
          lhs: "<span class='var'>R</span><sup>prop</sup>"
          conn: "&#x22CA;"
          rhs: "<span class='set'>R</span><sup>sand</sup>"
  - merge:
    - fxn: eqn
      arg:
        lhs: "U<sup>merge</sup>"
        conn: "&#x21a7;<sub>&sigma;</sub>"
        rhs:
          fxn: seqwrap
          arg:
            inside:
              - "i<sub>s</sub> += C<sub>&xi;</sub>(k<sub>&chi;</sub>)"
              - "i<sub><span class='set'R</span></sub> += C<sub>&xi;</sub>(k<sub>&chi;</sub>)"
              - "dref<sub>&sigma;</sub> += dref<sub>sand</sub>"
            after: "<sub>&sigma;</sub>"

speech acts:
  -
    - "<span class='var'>I</span> : &sigma;"
    - "<span class='var'>U</span>, an utterance in discourse"
  - assert:
    - fxn: eqn
      arg:
        lhs:
          fxn: eqn
          arg:
            lhs: "<span class='var'>I</span></sub>"
            conn: "&rArr;"
            rhs: "<span class='speechact'>!</span>U"
        conn: =
        rhs:
          fxn: upwrap
          arg:
            before: "<span class='var'>I</span>"
            update:
              fxn: eqn
              arg:
                lhs: "i<sub><span class='var'>I</span></sub>"
                conn: "&cap;"
                rhs:
                  fxn: semwrap
                  arg:
                    inside: "<span class='var'>U</span><sup>inf</sup><span>"
  - question:
    - fxn: eqn
      arg:
        lhs:
          fxn: eqn
          arg:
            lhs: "<span class='var'>I</span></sub>"
            conn: "&rArr;"
            rhs: "<span class='speechact'>?</span>U"
        conn: =
        rhs:
          fxn: upwrap
          arg:
            before: "<span class='var'>I</span>"
            update:
              fxn: eqn
              arg:
                lhs: "i<sub><span class='var'>I</span></sub>"
                conn: "&cap;"
                rhs:
                  fxn: semwrap
                  arg:
                    inside: "<span class='var'>U</span><sup>inf</sup><span>"
  - conjecture:
    - fxn: eqn
      arg:
        lhs:
          fxn: eqn
          arg:
            lhs: "<span class='var'>I</span></sub>"
            conn: "&rArr;"
            rhs: "<span class='speechact conjecture'>&#x25b5;&#x323;</span>U"
        conn: "="
        rhs:
          fxn: upwrap
          arg:
            before: "<span class='var'>I</span>"
            update: "C<sub>&xi;</sub>(j<sub>&chi;</sub>)"
  - correct:
    - fxn: eqn
      arg:
        lhs:
          fxn: eqn
          arg:
            lhs: "<span class='var'>I</span></sub>"
            conn: "&rArr;"
            rhs: "<span class='speechact correct'>&#x25bf;&#x323;</span>U"
        conn: =
        rhs:
          fxn: upwrap
          arg:
            before: "<span class='var'>I</span>"
            update:
              fxn: eqn
              arg:
                lhs: "i<sub><span class='var'>I</span></sub>"
                conn: "&cap;"
                rhs:
                  fxn: semwrap
                  arg:
                    inside: "<span class='var'>U</span><sup>inf</sup><span>"

bare plurals:
  -
    - "Ps : et"
    - "Q : et"
